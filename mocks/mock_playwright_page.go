// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/playwright-community/playwright-go (interfaces: Page)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_playwright_page.go -package=mocks github.com/playwright-community/playwright-go Page
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	playwright_go "github.com/playwright-community/playwright-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPage is a mock of Page interface.
type MockPage struct {
	ctrl     *gomock.Controller
	recorder *MockPageMockRecorder
	isgomock struct{}
}

// MockPageMockRecorder is the mock recorder for MockPage.
type MockPageMockRecorder struct {
	mock *MockPage
}

// NewMockPage creates a new mock instance.
func NewMockPage(ctrl *gomock.Controller) *MockPage {
	mock := &MockPage{ctrl: ctrl}
	mock.recorder = &MockPageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPage) EXPECT() *MockPageMockRecorder {
	return m.recorder
}

// AddInitScript mocks base method.
func (m *MockPage) AddInitScript(script playwright_go.Script) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInitScript", script)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInitScript indicates an expected call of AddInitScript.
func (mr *MockPageMockRecorder) AddInitScript(script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInitScript", reflect.TypeOf((*MockPage)(nil).AddInitScript), script)
}

// AddLocatorHandler mocks base method.
func (m *MockPage) AddLocatorHandler(locator playwright_go.Locator, handler func(playwright_go.Locator), options ...playwright_go.PageAddLocatorHandlerOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{locator, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLocatorHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLocatorHandler indicates an expected call of AddLocatorHandler.
func (mr *MockPageMockRecorder) AddLocatorHandler(locator, handler any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{locator, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocatorHandler", reflect.TypeOf((*MockPage)(nil).AddLocatorHandler), varargs...)
}

// AddScriptTag mocks base method.
func (m *MockPage) AddScriptTag(options playwright_go.PageAddScriptTagOptions) (playwright_go.ElementHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScriptTag", options)
	ret0, _ := ret[0].(playwright_go.ElementHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddScriptTag indicates an expected call of AddScriptTag.
func (mr *MockPageMockRecorder) AddScriptTag(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScriptTag", reflect.TypeOf((*MockPage)(nil).AddScriptTag), options)
}

// AddStyleTag mocks base method.
func (m *MockPage) AddStyleTag(options playwright_go.PageAddStyleTagOptions) (playwright_go.ElementHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStyleTag", options)
	ret0, _ := ret[0].(playwright_go.ElementHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStyleTag indicates an expected call of AddStyleTag.
func (mr *MockPageMockRecorder) AddStyleTag(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStyleTag", reflect.TypeOf((*MockPage)(nil).AddStyleTag), options)
}

// BringToFront mocks base method.
func (m *MockPage) BringToFront() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BringToFront")
	ret0, _ := ret[0].(error)
	return ret0
}

// BringToFront indicates an expected call of BringToFront.
func (mr *MockPageMockRecorder) BringToFront() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BringToFront", reflect.TypeOf((*MockPage)(nil).BringToFront))
}

// Check mocks base method.
func (m *MockPage) Check(selector string, options ...playwright_go.PageCheckOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockPageMockRecorder) Check(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPage)(nil).Check), varargs...)
}

// Click mocks base method.
func (m *MockPage) Click(selector string, options ...playwright_go.PageClickOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Click", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Click indicates an expected call of Click.
func (mr *MockPageMockRecorder) Click(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockPage)(nil).Click), varargs...)
}

// Clock mocks base method.
func (m *MockPage) Clock() playwright_go.Clock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clock")
	ret0, _ := ret[0].(playwright_go.Clock)
	return ret0
}

// Clock indicates an expected call of Clock.
func (mr *MockPageMockRecorder) Clock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockPage)(nil).Clock))
}

// Close mocks base method.
func (m *MockPage) Close(options ...playwright_go.PageCloseOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Close", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPageMockRecorder) Close(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPage)(nil).Close), options...)
}

// Content mocks base method.
func (m *MockPage) Content() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Content indicates an expected call of Content.
func (mr *MockPageMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockPage)(nil).Content))
}

// Context mocks base method.
func (m *MockPage) Context() playwright_go.BrowserContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(playwright_go.BrowserContext)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPageMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPage)(nil).Context))
}

// Dblclick mocks base method.
func (m *MockPage) Dblclick(selector string, options ...playwright_go.PageDblclickOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dblclick", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dblclick indicates an expected call of Dblclick.
func (mr *MockPageMockRecorder) Dblclick(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dblclick", reflect.TypeOf((*MockPage)(nil).Dblclick), varargs...)
}

// DispatchEvent mocks base method.
func (m *MockPage) DispatchEvent(selector, typ string, eventInit any, options ...playwright_go.PageDispatchEventOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, typ, eventInit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DispatchEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEvent indicates an expected call of DispatchEvent.
func (mr *MockPageMockRecorder) DispatchEvent(selector, typ, eventInit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, typ, eventInit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEvent", reflect.TypeOf((*MockPage)(nil).DispatchEvent), varargs...)
}

// DragAndDrop mocks base method.
func (m *MockPage) DragAndDrop(source, target string, options ...playwright_go.PageDragAndDropOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{source, target}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DragAndDrop", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DragAndDrop indicates an expected call of DragAndDrop.
func (mr *MockPageMockRecorder) DragAndDrop(source, target any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{source, target}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DragAndDrop", reflect.TypeOf((*MockPage)(nil).DragAndDrop), varargs...)
}

// Emit mocks base method.
func (m *MockPage) Emit(name string, payload ...any) bool {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range payload {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Emit", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Emit indicates an expected call of Emit.
func (mr *MockPageMockRecorder) Emit(name any, payload ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, payload...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockPage)(nil).Emit), varargs...)
}

// EmulateMedia mocks base method.
func (m *MockPage) EmulateMedia(options ...playwright_go.PageEmulateMediaOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EmulateMedia", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmulateMedia indicates an expected call of EmulateMedia.
func (mr *MockPageMockRecorder) EmulateMedia(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmulateMedia", reflect.TypeOf((*MockPage)(nil).EmulateMedia), options...)
}

// EvalOnSelector mocks base method.
func (m *MockPage) EvalOnSelector(selector, expression string, arg any, options ...playwright_go.PageEvalOnSelectorOptions) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector, expression, arg}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalOnSelector", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalOnSelector indicates an expected call of EvalOnSelector.
func (mr *MockPageMockRecorder) EvalOnSelector(selector, expression, arg any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, expression, arg}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalOnSelector", reflect.TypeOf((*MockPage)(nil).EvalOnSelector), varargs...)
}

// EvalOnSelectorAll mocks base method.
func (m *MockPage) EvalOnSelectorAll(selector, expression string, arg ...any) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector, expression}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalOnSelectorAll", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalOnSelectorAll indicates an expected call of EvalOnSelectorAll.
func (mr *MockPageMockRecorder) EvalOnSelectorAll(selector, expression any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, expression}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalOnSelectorAll", reflect.TypeOf((*MockPage)(nil).EvalOnSelectorAll), varargs...)
}

// Evaluate mocks base method.
func (m *MockPage) Evaluate(expression string, arg ...any) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{expression}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Evaluate", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate.
func (mr *MockPageMockRecorder) Evaluate(expression any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{expression}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockPage)(nil).Evaluate), varargs...)
}

// EvaluateHandle mocks base method.
func (m *MockPage) EvaluateHandle(expression string, arg ...any) (playwright_go.JSHandle, error) {
	m.ctrl.T.Helper()
	varargs := []any{expression}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateHandle", varargs...)
	ret0, _ := ret[0].(playwright_go.JSHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateHandle indicates an expected call of EvaluateHandle.
func (mr *MockPageMockRecorder) EvaluateHandle(expression any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{expression}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateHandle", reflect.TypeOf((*MockPage)(nil).EvaluateHandle), varargs...)
}

// ExpectConsoleMessage mocks base method.
func (m *MockPage) ExpectConsoleMessage(cb func() error, options ...playwright_go.PageExpectConsoleMessageOptions) (playwright_go.ConsoleMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectConsoleMessage", varargs...)
	ret0, _ := ret[0].(playwright_go.ConsoleMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectConsoleMessage indicates an expected call of ExpectConsoleMessage.
func (mr *MockPageMockRecorder) ExpectConsoleMessage(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectConsoleMessage", reflect.TypeOf((*MockPage)(nil).ExpectConsoleMessage), varargs...)
}

// ExpectDownload mocks base method.
func (m *MockPage) ExpectDownload(cb func() error, options ...playwright_go.PageExpectDownloadOptions) (playwright_go.Download, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectDownload", varargs...)
	ret0, _ := ret[0].(playwright_go.Download)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectDownload indicates an expected call of ExpectDownload.
func (mr *MockPageMockRecorder) ExpectDownload(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectDownload", reflect.TypeOf((*MockPage)(nil).ExpectDownload), varargs...)
}

// ExpectEvent mocks base method.
func (m *MockPage) ExpectEvent(event string, cb func() error, options ...playwright_go.PageExpectEventOptions) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{event, cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectEvent", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectEvent indicates an expected call of ExpectEvent.
func (mr *MockPageMockRecorder) ExpectEvent(event, cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{event, cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectEvent", reflect.TypeOf((*MockPage)(nil).ExpectEvent), varargs...)
}

// ExpectFileChooser mocks base method.
func (m *MockPage) ExpectFileChooser(cb func() error, options ...playwright_go.PageExpectFileChooserOptions) (playwright_go.FileChooser, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectFileChooser", varargs...)
	ret0, _ := ret[0].(playwright_go.FileChooser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectFileChooser indicates an expected call of ExpectFileChooser.
func (mr *MockPageMockRecorder) ExpectFileChooser(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectFileChooser", reflect.TypeOf((*MockPage)(nil).ExpectFileChooser), varargs...)
}

// ExpectNavigation mocks base method.
func (m *MockPage) ExpectNavigation(cb func() error, options ...playwright_go.PageExpectNavigationOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectNavigation", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectNavigation indicates an expected call of ExpectNavigation.
func (mr *MockPageMockRecorder) ExpectNavigation(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectNavigation", reflect.TypeOf((*MockPage)(nil).ExpectNavigation), varargs...)
}

// ExpectPopup mocks base method.
func (m *MockPage) ExpectPopup(cb func() error, options ...playwright_go.PageExpectPopupOptions) (playwright_go.Page, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectPopup", varargs...)
	ret0, _ := ret[0].(playwright_go.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectPopup indicates an expected call of ExpectPopup.
func (mr *MockPageMockRecorder) ExpectPopup(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectPopup", reflect.TypeOf((*MockPage)(nil).ExpectPopup), varargs...)
}

// ExpectRequest mocks base method.
func (m *MockPage) ExpectRequest(urlOrPredicate any, cb func() error, options ...playwright_go.PageExpectRequestOptions) (playwright_go.Request, error) {
	m.ctrl.T.Helper()
	varargs := []any{urlOrPredicate, cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectRequest", varargs...)
	ret0, _ := ret[0].(playwright_go.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectRequest indicates an expected call of ExpectRequest.
func (mr *MockPageMockRecorder) ExpectRequest(urlOrPredicate, cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{urlOrPredicate, cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectRequest", reflect.TypeOf((*MockPage)(nil).ExpectRequest), varargs...)
}

// ExpectRequestFinished mocks base method.
func (m *MockPage) ExpectRequestFinished(cb func() error, options ...playwright_go.PageExpectRequestFinishedOptions) (playwright_go.Request, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectRequestFinished", varargs...)
	ret0, _ := ret[0].(playwright_go.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectRequestFinished indicates an expected call of ExpectRequestFinished.
func (mr *MockPageMockRecorder) ExpectRequestFinished(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectRequestFinished", reflect.TypeOf((*MockPage)(nil).ExpectRequestFinished), varargs...)
}

// ExpectResponse mocks base method.
func (m *MockPage) ExpectResponse(urlOrPredicate any, cb func() error, options ...playwright_go.PageExpectResponseOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{urlOrPredicate, cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectResponse", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectResponse indicates an expected call of ExpectResponse.
func (mr *MockPageMockRecorder) ExpectResponse(urlOrPredicate, cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{urlOrPredicate, cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectResponse", reflect.TypeOf((*MockPage)(nil).ExpectResponse), varargs...)
}

// ExpectWebSocket mocks base method.
func (m *MockPage) ExpectWebSocket(cb func() error, options ...playwright_go.PageExpectWebSocketOptions) (playwright_go.WebSocket, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectWebSocket", varargs...)
	ret0, _ := ret[0].(playwright_go.WebSocket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectWebSocket indicates an expected call of ExpectWebSocket.
func (mr *MockPageMockRecorder) ExpectWebSocket(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectWebSocket", reflect.TypeOf((*MockPage)(nil).ExpectWebSocket), varargs...)
}

// ExpectWorker mocks base method.
func (m *MockPage) ExpectWorker(cb func() error, options ...playwright_go.PageExpectWorkerOptions) (playwright_go.Worker, error) {
	m.ctrl.T.Helper()
	varargs := []any{cb}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpectWorker", varargs...)
	ret0, _ := ret[0].(playwright_go.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectWorker indicates an expected call of ExpectWorker.
func (mr *MockPageMockRecorder) ExpectWorker(cb any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cb}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectWorker", reflect.TypeOf((*MockPage)(nil).ExpectWorker), varargs...)
}

// ExposeBinding mocks base method.
func (m *MockPage) ExposeBinding(name string, binding playwright_go.BindingCallFunction, handle ...bool) error {
	m.ctrl.T.Helper()
	varargs := []any{name, binding}
	for _, a := range handle {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExposeBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExposeBinding indicates an expected call of ExposeBinding.
func (mr *MockPageMockRecorder) ExposeBinding(name, binding any, handle ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, binding}, handle...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExposeBinding", reflect.TypeOf((*MockPage)(nil).ExposeBinding), varargs...)
}

// ExposeFunction mocks base method.
func (m *MockPage) ExposeFunction(name string, binding func(...any) any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExposeFunction", name, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExposeFunction indicates an expected call of ExposeFunction.
func (mr *MockPageMockRecorder) ExposeFunction(name, binding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExposeFunction", reflect.TypeOf((*MockPage)(nil).ExposeFunction), name, binding)
}

// Fill mocks base method.
func (m *MockPage) Fill(selector, value string, options ...playwright_go.PageFillOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, value}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fill", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fill indicates an expected call of Fill.
func (mr *MockPageMockRecorder) Fill(selector, value any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, value}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockPage)(nil).Fill), varargs...)
}

// Focus mocks base method.
func (m *MockPage) Focus(selector string, options ...playwright_go.PageFocusOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Focus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Focus indicates an expected call of Focus.
func (mr *MockPageMockRecorder) Focus(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focus", reflect.TypeOf((*MockPage)(nil).Focus), varargs...)
}

// Frame mocks base method.
func (m *MockPage) Frame(options ...playwright_go.PageFrameOptions) playwright_go.Frame {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Frame", varargs...)
	ret0, _ := ret[0].(playwright_go.Frame)
	return ret0
}

// Frame indicates an expected call of Frame.
func (mr *MockPageMockRecorder) Frame(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frame", reflect.TypeOf((*MockPage)(nil).Frame), options...)
}

// FrameLocator mocks base method.
func (m *MockPage) FrameLocator(selector string) playwright_go.FrameLocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FrameLocator", selector)
	ret0, _ := ret[0].(playwright_go.FrameLocator)
	return ret0
}

// FrameLocator indicates an expected call of FrameLocator.
func (mr *MockPageMockRecorder) FrameLocator(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FrameLocator", reflect.TypeOf((*MockPage)(nil).FrameLocator), selector)
}

// Frames mocks base method.
func (m *MockPage) Frames() []playwright_go.Frame {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Frames")
	ret0, _ := ret[0].([]playwright_go.Frame)
	return ret0
}

// Frames indicates an expected call of Frames.
func (mr *MockPageMockRecorder) Frames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frames", reflect.TypeOf((*MockPage)(nil).Frames))
}

// GetAttribute mocks base method.
func (m *MockPage) GetAttribute(selector, name string, options ...playwright_go.PageGetAttributeOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttribute", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockPageMockRecorder) GetAttribute(selector, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockPage)(nil).GetAttribute), varargs...)
}

// GetByAltText mocks base method.
func (m *MockPage) GetByAltText(text any, options ...playwright_go.PageGetByAltTextOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByAltText", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByAltText indicates an expected call of GetByAltText.
func (mr *MockPageMockRecorder) GetByAltText(text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAltText", reflect.TypeOf((*MockPage)(nil).GetByAltText), varargs...)
}

// GetByLabel mocks base method.
func (m *MockPage) GetByLabel(text any, options ...playwright_go.PageGetByLabelOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByLabel", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByLabel indicates an expected call of GetByLabel.
func (mr *MockPageMockRecorder) GetByLabel(text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLabel", reflect.TypeOf((*MockPage)(nil).GetByLabel), varargs...)
}

// GetByPlaceholder mocks base method.
func (m *MockPage) GetByPlaceholder(text any, options ...playwright_go.PageGetByPlaceholderOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByPlaceholder", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByPlaceholder indicates an expected call of GetByPlaceholder.
func (mr *MockPageMockRecorder) GetByPlaceholder(text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaceholder", reflect.TypeOf((*MockPage)(nil).GetByPlaceholder), varargs...)
}

// GetByRole mocks base method.
func (m *MockPage) GetByRole(role playwright_go.AriaRole, options ...playwright_go.PageGetByRoleOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{role}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByRole", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByRole indicates an expected call of GetByRole.
func (mr *MockPageMockRecorder) GetByRole(role any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{role}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRole", reflect.TypeOf((*MockPage)(nil).GetByRole), varargs...)
}

// GetByTestId mocks base method.
func (m *MockPage) GetByTestId(testId any) playwright_go.Locator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTestId", testId)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByTestId indicates an expected call of GetByTestId.
func (mr *MockPageMockRecorder) GetByTestId(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTestId", reflect.TypeOf((*MockPage)(nil).GetByTestId), testId)
}

// GetByText mocks base method.
func (m *MockPage) GetByText(text any, options ...playwright_go.PageGetByTextOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByText", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByText indicates an expected call of GetByText.
func (mr *MockPageMockRecorder) GetByText(text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByText", reflect.TypeOf((*MockPage)(nil).GetByText), varargs...)
}

// GetByTitle mocks base method.
func (m *MockPage) GetByTitle(text any, options ...playwright_go.PageGetByTitleOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByTitle", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockPageMockRecorder) GetByTitle(text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockPage)(nil).GetByTitle), varargs...)
}

// GoBack mocks base method.
func (m *MockPage) GoBack(options ...playwright_go.PageGoBackOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GoBack", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoBack indicates an expected call of GoBack.
func (mr *MockPageMockRecorder) GoBack(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoBack", reflect.TypeOf((*MockPage)(nil).GoBack), options...)
}

// GoForward mocks base method.
func (m *MockPage) GoForward(options ...playwright_go.PageGoForwardOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GoForward", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoForward indicates an expected call of GoForward.
func (mr *MockPageMockRecorder) GoForward(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoForward", reflect.TypeOf((*MockPage)(nil).GoForward), options...)
}

// Goto mocks base method.
func (m *MockPage) Goto(url string, options ...playwright_go.PageGotoOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{url}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Goto", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Goto indicates an expected call of Goto.
func (mr *MockPageMockRecorder) Goto(url any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{url}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goto", reflect.TypeOf((*MockPage)(nil).Goto), varargs...)
}

// Hover mocks base method.
func (m *MockPage) Hover(selector string, options ...playwright_go.PageHoverOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hover", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hover indicates an expected call of Hover.
func (mr *MockPageMockRecorder) Hover(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hover", reflect.TypeOf((*MockPage)(nil).Hover), varargs...)
}

// InnerHTML mocks base method.
func (m *MockPage) InnerHTML(selector string, options ...playwright_go.PageInnerHTMLOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InnerHTML", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InnerHTML indicates an expected call of InnerHTML.
func (mr *MockPageMockRecorder) InnerHTML(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerHTML", reflect.TypeOf((*MockPage)(nil).InnerHTML), varargs...)
}

// InnerText mocks base method.
func (m *MockPage) InnerText(selector string, options ...playwright_go.PageInnerTextOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InnerText", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InnerText indicates an expected call of InnerText.
func (mr *MockPageMockRecorder) InnerText(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerText", reflect.TypeOf((*MockPage)(nil).InnerText), varargs...)
}

// InputValue mocks base method.
func (m *MockPage) InputValue(selector string, options ...playwright_go.PageInputValueOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InputValue", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputValue indicates an expected call of InputValue.
func (mr *MockPageMockRecorder) InputValue(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputValue", reflect.TypeOf((*MockPage)(nil).InputValue), varargs...)
}

// IsChecked mocks base method.
func (m *MockPage) IsChecked(selector string, options ...playwright_go.PageIsCheckedOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsChecked", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsChecked indicates an expected call of IsChecked.
func (mr *MockPageMockRecorder) IsChecked(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChecked", reflect.TypeOf((*MockPage)(nil).IsChecked), varargs...)
}

// IsClosed mocks base method.
func (m *MockPage) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockPageMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockPage)(nil).IsClosed))
}

// IsDisabled mocks base method.
func (m *MockPage) IsDisabled(selector string, options ...playwright_go.PageIsDisabledOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsDisabled", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDisabled indicates an expected call of IsDisabled.
func (mr *MockPageMockRecorder) IsDisabled(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisabled", reflect.TypeOf((*MockPage)(nil).IsDisabled), varargs...)
}

// IsEditable mocks base method.
func (m *MockPage) IsEditable(selector string, options ...playwright_go.PageIsEditableOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsEditable", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEditable indicates an expected call of IsEditable.
func (mr *MockPageMockRecorder) IsEditable(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEditable", reflect.TypeOf((*MockPage)(nil).IsEditable), varargs...)
}

// IsEnabled mocks base method.
func (m *MockPage) IsEnabled(selector string, options ...playwright_go.PageIsEnabledOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsEnabled", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockPageMockRecorder) IsEnabled(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockPage)(nil).IsEnabled), varargs...)
}

// IsHidden mocks base method.
func (m *MockPage) IsHidden(selector string, options ...playwright_go.PageIsHiddenOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsHidden", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsHidden indicates an expected call of IsHidden.
func (mr *MockPageMockRecorder) IsHidden(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHidden", reflect.TypeOf((*MockPage)(nil).IsHidden), varargs...)
}

// IsVisible mocks base method.
func (m *MockPage) IsVisible(selector string, options ...playwright_go.PageIsVisibleOptions) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsVisible", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVisible indicates an expected call of IsVisible.
func (mr *MockPageMockRecorder) IsVisible(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVisible", reflect.TypeOf((*MockPage)(nil).IsVisible), varargs...)
}

// Keyboard mocks base method.
func (m *MockPage) Keyboard() playwright_go.Keyboard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keyboard")
	ret0, _ := ret[0].(playwright_go.Keyboard)
	return ret0
}

// Keyboard indicates an expected call of Keyboard.
func (mr *MockPageMockRecorder) Keyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keyboard", reflect.TypeOf((*MockPage)(nil).Keyboard))
}

// ListenerCount mocks base method.
func (m *MockPage) ListenerCount(name string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerCount", name)
	ret0, _ := ret[0].(int)
	return ret0
}

// ListenerCount indicates an expected call of ListenerCount.
func (mr *MockPageMockRecorder) ListenerCount(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerCount", reflect.TypeOf((*MockPage)(nil).ListenerCount), name)
}

// Locator mocks base method.
func (m *MockPage) Locator(selector string, options ...playwright_go.PageLocatorOptions) playwright_go.Locator {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Locator", varargs...)
	ret0, _ := ret[0].(playwright_go.Locator)
	return ret0
}

// Locator indicates an expected call of Locator.
func (mr *MockPageMockRecorder) Locator(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locator", reflect.TypeOf((*MockPage)(nil).Locator), varargs...)
}

// MainFrame mocks base method.
func (m *MockPage) MainFrame() playwright_go.Frame {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainFrame")
	ret0, _ := ret[0].(playwright_go.Frame)
	return ret0
}

// MainFrame indicates an expected call of MainFrame.
func (mr *MockPageMockRecorder) MainFrame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainFrame", reflect.TypeOf((*MockPage)(nil).MainFrame))
}

// Mouse mocks base method.
func (m *MockPage) Mouse() playwright_go.Mouse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mouse")
	ret0, _ := ret[0].(playwright_go.Mouse)
	return ret0
}

// Mouse indicates an expected call of Mouse.
func (mr *MockPageMockRecorder) Mouse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mouse", reflect.TypeOf((*MockPage)(nil).Mouse))
}

// On mocks base method.
func (m *MockPage) On(name string, handler any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "On", name, handler)
}

// On indicates an expected call of On.
func (mr *MockPageMockRecorder) On(name, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockPage)(nil).On), name, handler)
}

// OnClose mocks base method.
func (m *MockPage) OnClose(fn func(playwright_go.Page)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", fn)
}

// OnClose indicates an expected call of OnClose.
func (mr *MockPageMockRecorder) OnClose(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockPage)(nil).OnClose), fn)
}

// OnConsole mocks base method.
func (m *MockPage) OnConsole(fn func(playwright_go.ConsoleMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConsole", fn)
}

// OnConsole indicates an expected call of OnConsole.
func (mr *MockPageMockRecorder) OnConsole(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConsole", reflect.TypeOf((*MockPage)(nil).OnConsole), fn)
}

// OnCrash mocks base method.
func (m *MockPage) OnCrash(fn func(playwright_go.Page)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnCrash", fn)
}

// OnCrash indicates an expected call of OnCrash.
func (mr *MockPageMockRecorder) OnCrash(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCrash", reflect.TypeOf((*MockPage)(nil).OnCrash), fn)
}

// OnDOMContentLoaded mocks base method.
func (m *MockPage) OnDOMContentLoaded(fn func(playwright_go.Page)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDOMContentLoaded", fn)
}

// OnDOMContentLoaded indicates an expected call of OnDOMContentLoaded.
func (mr *MockPageMockRecorder) OnDOMContentLoaded(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDOMContentLoaded", reflect.TypeOf((*MockPage)(nil).OnDOMContentLoaded), fn)
}

// OnDialog mocks base method.
func (m *MockPage) OnDialog(fn func(playwright_go.Dialog)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDialog", fn)
}

// OnDialog indicates an expected call of OnDialog.
func (mr *MockPageMockRecorder) OnDialog(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDialog", reflect.TypeOf((*MockPage)(nil).OnDialog), fn)
}

// OnDownload mocks base method.
func (m *MockPage) OnDownload(fn func(playwright_go.Download)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDownload", fn)
}

// OnDownload indicates an expected call of OnDownload.
func (mr *MockPageMockRecorder) OnDownload(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDownload", reflect.TypeOf((*MockPage)(nil).OnDownload), fn)
}

// OnFileChooser mocks base method.
func (m *MockPage) OnFileChooser(fn func(playwright_go.FileChooser)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFileChooser", fn)
}

// OnFileChooser indicates an expected call of OnFileChooser.
func (mr *MockPageMockRecorder) OnFileChooser(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFileChooser", reflect.TypeOf((*MockPage)(nil).OnFileChooser), fn)
}

// OnFrameAttached mocks base method.
func (m *MockPage) OnFrameAttached(fn func(playwright_go.Frame)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFrameAttached", fn)
}

// OnFrameAttached indicates an expected call of OnFrameAttached.
func (mr *MockPageMockRecorder) OnFrameAttached(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFrameAttached", reflect.TypeOf((*MockPage)(nil).OnFrameAttached), fn)
}

// OnFrameDetached mocks base method.
func (m *MockPage) OnFrameDetached(fn func(playwright_go.Frame)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFrameDetached", fn)
}

// OnFrameDetached indicates an expected call of OnFrameDetached.
func (mr *MockPageMockRecorder) OnFrameDetached(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFrameDetached", reflect.TypeOf((*MockPage)(nil).OnFrameDetached), fn)
}

// OnFrameNavigated mocks base method.
func (m *MockPage) OnFrameNavigated(fn func(playwright_go.Frame)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFrameNavigated", fn)
}

// OnFrameNavigated indicates an expected call of OnFrameNavigated.
func (mr *MockPageMockRecorder) OnFrameNavigated(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFrameNavigated", reflect.TypeOf((*MockPage)(nil).OnFrameNavigated), fn)
}

// OnLoad mocks base method.
func (m *MockPage) OnLoad(fn func(playwright_go.Page)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnLoad", fn)
}

// OnLoad indicates an expected call of OnLoad.
func (mr *MockPageMockRecorder) OnLoad(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnLoad", reflect.TypeOf((*MockPage)(nil).OnLoad), fn)
}

// OnPageError mocks base method.
func (m *MockPage) OnPageError(fn func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPageError", fn)
}

// OnPageError indicates an expected call of OnPageError.
func (mr *MockPageMockRecorder) OnPageError(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPageError", reflect.TypeOf((*MockPage)(nil).OnPageError), fn)
}

// OnPopup mocks base method.
func (m *MockPage) OnPopup(fn func(playwright_go.Page)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPopup", fn)
}

// OnPopup indicates an expected call of OnPopup.
func (mr *MockPageMockRecorder) OnPopup(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPopup", reflect.TypeOf((*MockPage)(nil).OnPopup), fn)
}

// OnRequest mocks base method.
func (m *MockPage) OnRequest(fn func(playwright_go.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRequest", fn)
}

// OnRequest indicates an expected call of OnRequest.
func (mr *MockPageMockRecorder) OnRequest(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequest", reflect.TypeOf((*MockPage)(nil).OnRequest), fn)
}

// OnRequestFailed mocks base method.
func (m *MockPage) OnRequestFailed(fn func(playwright_go.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRequestFailed", fn)
}

// OnRequestFailed indicates an expected call of OnRequestFailed.
func (mr *MockPageMockRecorder) OnRequestFailed(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequestFailed", reflect.TypeOf((*MockPage)(nil).OnRequestFailed), fn)
}

// OnRequestFinished mocks base method.
func (m *MockPage) OnRequestFinished(fn func(playwright_go.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRequestFinished", fn)
}

// OnRequestFinished indicates an expected call of OnRequestFinished.
func (mr *MockPageMockRecorder) OnRequestFinished(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequestFinished", reflect.TypeOf((*MockPage)(nil).OnRequestFinished), fn)
}

// OnResponse mocks base method.
func (m *MockPage) OnResponse(fn func(playwright_go.Response)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnResponse", fn)
}

// OnResponse indicates an expected call of OnResponse.
func (mr *MockPageMockRecorder) OnResponse(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnResponse", reflect.TypeOf((*MockPage)(nil).OnResponse), fn)
}

// OnWebSocket mocks base method.
func (m *MockPage) OnWebSocket(fn func(playwright_go.WebSocket)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnWebSocket", fn)
}

// OnWebSocket indicates an expected call of OnWebSocket.
func (mr *MockPageMockRecorder) OnWebSocket(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnWebSocket", reflect.TypeOf((*MockPage)(nil).OnWebSocket), fn)
}

// OnWorker mocks base method.
func (m *MockPage) OnWorker(fn func(playwright_go.Worker)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnWorker", fn)
}

// OnWorker indicates an expected call of OnWorker.
func (mr *MockPageMockRecorder) OnWorker(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnWorker", reflect.TypeOf((*MockPage)(nil).OnWorker), fn)
}

// Once mocks base method.
func (m *MockPage) Once(name string, handler any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Once", name, handler)
}

// Once indicates an expected call of Once.
func (mr *MockPageMockRecorder) Once(name, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Once", reflect.TypeOf((*MockPage)(nil).Once), name, handler)
}

// Opener mocks base method.
func (m *MockPage) Opener() (playwright_go.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Opener")
	ret0, _ := ret[0].(playwright_go.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Opener indicates an expected call of Opener.
func (mr *MockPageMockRecorder) Opener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Opener", reflect.TypeOf((*MockPage)(nil).Opener))
}

// PDF mocks base method.
func (m *MockPage) PDF(options ...playwright_go.PagePdfOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PDF", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PDF indicates an expected call of PDF.
func (mr *MockPageMockRecorder) PDF(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PDF", reflect.TypeOf((*MockPage)(nil).PDF), options...)
}

// Pause mocks base method.
func (m *MockPage) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockPageMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPage)(nil).Pause))
}

// Press mocks base method.
func (m *MockPage) Press(selector, key string, options ...playwright_go.PagePressOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Press", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Press indicates an expected call of Press.
func (mr *MockPageMockRecorder) Press(selector, key any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Press", reflect.TypeOf((*MockPage)(nil).Press), varargs...)
}

// QuerySelector mocks base method.
func (m *MockPage) QuerySelector(selector string, options ...playwright_go.PageQuerySelectorOptions) (playwright_go.ElementHandle, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySelector", varargs...)
	ret0, _ := ret[0].(playwright_go.ElementHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySelector indicates an expected call of QuerySelector.
func (mr *MockPageMockRecorder) QuerySelector(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySelector", reflect.TypeOf((*MockPage)(nil).QuerySelector), varargs...)
}

// QuerySelectorAll mocks base method.
func (m *MockPage) QuerySelectorAll(selector string) ([]playwright_go.ElementHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySelectorAll", selector)
	ret0, _ := ret[0].([]playwright_go.ElementHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySelectorAll indicates an expected call of QuerySelectorAll.
func (mr *MockPageMockRecorder) QuerySelectorAll(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySelectorAll", reflect.TypeOf((*MockPage)(nil).QuerySelectorAll), selector)
}

// Reload mocks base method.
func (m *MockPage) Reload(options ...playwright_go.PageReloadOptions) (playwright_go.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reload", varargs...)
	ret0, _ := ret[0].(playwright_go.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload.
func (mr *MockPageMockRecorder) Reload(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPage)(nil).Reload), options...)
}

// RemoveListener mocks base method.
func (m *MockPage) RemoveListener(name string, handler any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", name, handler)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockPageMockRecorder) RemoveListener(name, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockPage)(nil).RemoveListener), name, handler)
}

// RemoveListeners mocks base method.
func (m *MockPage) RemoveListeners(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListeners", name)
}

// RemoveListeners indicates an expected call of RemoveListeners.
func (mr *MockPageMockRecorder) RemoveListeners(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListeners", reflect.TypeOf((*MockPage)(nil).RemoveListeners), name)
}

// RemoveLocatorHandler mocks base method.
func (m *MockPage) RemoveLocatorHandler(locator playwright_go.Locator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocatorHandler", locator)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLocatorHandler indicates an expected call of RemoveLocatorHandler.
func (mr *MockPageMockRecorder) RemoveLocatorHandler(locator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocatorHandler", reflect.TypeOf((*MockPage)(nil).RemoveLocatorHandler), locator)
}

// Request mocks base method.
func (m *MockPage) Request() playwright_go.APIRequestContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(playwright_go.APIRequestContext)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockPageMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockPage)(nil).Request))
}

// RequestGC mocks base method.
func (m *MockPage) RequestGC() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestGC")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestGC indicates an expected call of RequestGC.
func (mr *MockPageMockRecorder) RequestGC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGC", reflect.TypeOf((*MockPage)(nil).RequestGC))
}

// Route mocks base method.
func (m *MockPage) Route(url any, handler func(playwright_go.Route), times ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{url, handler}
	for _, a := range times {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Route", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockPageMockRecorder) Route(url, handler any, times ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{url, handler}, times...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockPage)(nil).Route), varargs...)
}

// RouteFromHAR mocks base method.
func (m *MockPage) RouteFromHAR(har string, options ...playwright_go.PageRouteFromHAROptions) error {
	m.ctrl.T.Helper()
	varargs := []any{har}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RouteFromHAR", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteFromHAR indicates an expected call of RouteFromHAR.
func (mr *MockPageMockRecorder) RouteFromHAR(har any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{har}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteFromHAR", reflect.TypeOf((*MockPage)(nil).RouteFromHAR), varargs...)
}

// RouteWebSocket mocks base method.
func (m *MockPage) RouteWebSocket(url any, handler func(playwright_go.WebSocketRoute)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteWebSocket", url, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteWebSocket indicates an expected call of RouteWebSocket.
func (mr *MockPageMockRecorder) RouteWebSocket(url, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteWebSocket", reflect.TypeOf((*MockPage)(nil).RouteWebSocket), url, handler)
}

// Screenshot mocks base method.
func (m *MockPage) Screenshot(options ...playwright_go.PageScreenshotOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Screenshot", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot.
func (mr *MockPageMockRecorder) Screenshot(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockPage)(nil).Screenshot), options...)
}

// SelectOption mocks base method.
func (m *MockPage) SelectOption(selector string, values playwright_go.SelectOptionValues, options ...playwright_go.PageSelectOptionOptions) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector, values}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectOption", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOption indicates an expected call of SelectOption.
func (mr *MockPageMockRecorder) SelectOption(selector, values any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, values}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOption", reflect.TypeOf((*MockPage)(nil).SelectOption), varargs...)
}

// SetChecked mocks base method.
func (m *MockPage) SetChecked(selector string, checked bool, options ...playwright_go.PageSetCheckedOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, checked}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetChecked", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChecked indicates an expected call of SetChecked.
func (mr *MockPageMockRecorder) SetChecked(selector, checked any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, checked}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChecked", reflect.TypeOf((*MockPage)(nil).SetChecked), varargs...)
}

// SetContent mocks base method.
func (m *MockPage) SetContent(html string, options ...playwright_go.PageSetContentOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{html}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetContent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContent indicates an expected call of SetContent.
func (mr *MockPageMockRecorder) SetContent(html any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{html}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContent", reflect.TypeOf((*MockPage)(nil).SetContent), varargs...)
}

// SetDefaultNavigationTimeout mocks base method.
func (m *MockPage) SetDefaultNavigationTimeout(timeout float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultNavigationTimeout", timeout)
}

// SetDefaultNavigationTimeout indicates an expected call of SetDefaultNavigationTimeout.
func (mr *MockPageMockRecorder) SetDefaultNavigationTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultNavigationTimeout", reflect.TypeOf((*MockPage)(nil).SetDefaultNavigationTimeout), timeout)
}

// SetDefaultTimeout mocks base method.
func (m *MockPage) SetDefaultTimeout(timeout float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultTimeout", timeout)
}

// SetDefaultTimeout indicates an expected call of SetDefaultTimeout.
func (mr *MockPageMockRecorder) SetDefaultTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultTimeout", reflect.TypeOf((*MockPage)(nil).SetDefaultTimeout), timeout)
}

// SetExtraHTTPHeaders mocks base method.
func (m *MockPage) SetExtraHTTPHeaders(headers map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExtraHTTPHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExtraHTTPHeaders indicates an expected call of SetExtraHTTPHeaders.
func (mr *MockPageMockRecorder) SetExtraHTTPHeaders(headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtraHTTPHeaders", reflect.TypeOf((*MockPage)(nil).SetExtraHTTPHeaders), headers)
}

// SetInputFiles mocks base method.
func (m *MockPage) SetInputFiles(selector string, files any, options ...playwright_go.PageSetInputFilesOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, files}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInputFiles", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInputFiles indicates an expected call of SetInputFiles.
func (mr *MockPageMockRecorder) SetInputFiles(selector, files any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, files}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInputFiles", reflect.TypeOf((*MockPage)(nil).SetInputFiles), varargs...)
}

// SetViewportSize mocks base method.
func (m *MockPage) SetViewportSize(width, height int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetViewportSize", width, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetViewportSize indicates an expected call of SetViewportSize.
func (mr *MockPageMockRecorder) SetViewportSize(width, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetViewportSize", reflect.TypeOf((*MockPage)(nil).SetViewportSize), width, height)
}

// Tap mocks base method.
func (m *MockPage) Tap(selector string, options ...playwright_go.PageTapOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tap indicates an expected call of Tap.
func (mr *MockPageMockRecorder) Tap(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tap", reflect.TypeOf((*MockPage)(nil).Tap), varargs...)
}

// TextContent mocks base method.
func (m *MockPage) TextContent(selector string, options ...playwright_go.PageTextContentOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TextContent", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextContent indicates an expected call of TextContent.
func (mr *MockPageMockRecorder) TextContent(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextContent", reflect.TypeOf((*MockPage)(nil).TextContent), varargs...)
}

// Title mocks base method.
func (m *MockPage) Title() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Title indicates an expected call of Title.
func (mr *MockPageMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockPage)(nil).Title))
}

// Touchscreen mocks base method.
func (m *MockPage) Touchscreen() playwright_go.Touchscreen {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Touchscreen")
	ret0, _ := ret[0].(playwright_go.Touchscreen)
	return ret0
}

// Touchscreen indicates an expected call of Touchscreen.
func (mr *MockPageMockRecorder) Touchscreen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touchscreen", reflect.TypeOf((*MockPage)(nil).Touchscreen))
}

// Type mocks base method.
func (m *MockPage) Type(selector, text string, options ...playwright_go.PageTypeOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector, text}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Type", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPageMockRecorder) Type(selector, text any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector, text}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPage)(nil).Type), varargs...)
}

// URL mocks base method.
func (m *MockPage) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockPageMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockPage)(nil).URL))
}

// Uncheck mocks base method.
func (m *MockPage) Uncheck(selector string, options ...playwright_go.PageUncheckOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Uncheck", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uncheck indicates an expected call of Uncheck.
func (mr *MockPageMockRecorder) Uncheck(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncheck", reflect.TypeOf((*MockPage)(nil).Uncheck), varargs...)
}

// Unroute mocks base method.
func (m *MockPage) Unroute(url any, handler ...func(playwright_go.Route)) error {
	m.ctrl.T.Helper()
	varargs := []any{url}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unroute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unroute indicates an expected call of Unroute.
func (mr *MockPageMockRecorder) Unroute(url any, handler ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{url}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unroute", reflect.TypeOf((*MockPage)(nil).Unroute), varargs...)
}

// UnrouteAll mocks base method.
func (m *MockPage) UnrouteAll(options ...playwright_go.PageUnrouteAllOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnrouteAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnrouteAll indicates an expected call of UnrouteAll.
func (mr *MockPageMockRecorder) UnrouteAll(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrouteAll", reflect.TypeOf((*MockPage)(nil).UnrouteAll), options...)
}

// Video mocks base method.
func (m *MockPage) Video() playwright_go.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(playwright_go.Video)
	return ret0
}

// Video indicates an expected call of Video.
func (mr *MockPageMockRecorder) Video() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockPage)(nil).Video))
}

// ViewportSize mocks base method.
func (m *MockPage) ViewportSize() *playwright_go.Size {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewportSize")
	ret0, _ := ret[0].(*playwright_go.Size)
	return ret0
}

// ViewportSize indicates an expected call of ViewportSize.
func (mr *MockPageMockRecorder) ViewportSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewportSize", reflect.TypeOf((*MockPage)(nil).ViewportSize))
}

// WaitForEvent mocks base method.
func (m *MockPage) WaitForEvent(event string, options ...playwright_go.PageWaitForEventOptions) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForEvent", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForEvent indicates an expected call of WaitForEvent.
func (mr *MockPageMockRecorder) WaitForEvent(event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForEvent", reflect.TypeOf((*MockPage)(nil).WaitForEvent), varargs...)
}

// WaitForFunction mocks base method.
func (m *MockPage) WaitForFunction(expression string, arg any, options ...playwright_go.PageWaitForFunctionOptions) (playwright_go.JSHandle, error) {
	m.ctrl.T.Helper()
	varargs := []any{expression, arg}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForFunction", varargs...)
	ret0, _ := ret[0].(playwright_go.JSHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForFunction indicates an expected call of WaitForFunction.
func (mr *MockPageMockRecorder) WaitForFunction(expression, arg any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{expression, arg}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFunction", reflect.TypeOf((*MockPage)(nil).WaitForFunction), varargs...)
}

// WaitForLoadState mocks base method.
func (m *MockPage) WaitForLoadState(options ...playwright_go.PageWaitForLoadStateOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForLoadState", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForLoadState indicates an expected call of WaitForLoadState.
func (mr *MockPageMockRecorder) WaitForLoadState(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForLoadState", reflect.TypeOf((*MockPage)(nil).WaitForLoadState), options...)
}

// WaitForSelector mocks base method.
func (m *MockPage) WaitForSelector(selector string, options ...playwright_go.PageWaitForSelectorOptions) (playwright_go.ElementHandle, error) {
	m.ctrl.T.Helper()
	varargs := []any{selector}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForSelector", varargs...)
	ret0, _ := ret[0].(playwright_go.ElementHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForSelector indicates an expected call of WaitForSelector.
func (mr *MockPageMockRecorder) WaitForSelector(selector any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{selector}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForSelector", reflect.TypeOf((*MockPage)(nil).WaitForSelector), varargs...)
}

// WaitForTimeout mocks base method.
func (m *MockPage) WaitForTimeout(timeout float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForTimeout", timeout)
}

// WaitForTimeout indicates an expected call of WaitForTimeout.
func (mr *MockPageMockRecorder) WaitForTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTimeout", reflect.TypeOf((*MockPage)(nil).WaitForTimeout), timeout)
}

// WaitForURL mocks base method.
func (m *MockPage) WaitForURL(url any, options ...playwright_go.PageWaitForURLOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{url}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForURL", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForURL indicates an expected call of WaitForURL.
func (mr *MockPageMockRecorder) WaitForURL(url any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{url}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForURL", reflect.TypeOf((*MockPage)(nil).WaitForURL), varargs...)
}

// Workers mocks base method.
func (m *MockPage) Workers() []playwright_go.Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workers")
	ret0, _ := ret[0].([]playwright_go.Worker)
	return ret0
}

// Workers indicates an expected call of Workers.
func (mr *MockPageMockRecorder) Workers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workers", reflect.TypeOf((*MockPage)(nil).Workers))
}
